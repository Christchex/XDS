#pragma once

#define RESOURCE_PRIORITY 0x0
#define RESOURCE_COMMIT 0x1
#define RESOURCE_THREAD 0x2
#define RESOURCE_EVENT 0x3
#define RESOURCE_MUTEX 0x4
#define RESOURCE_SEMAPHORE 0x5
#define RESOURCE_TIMER 0x6
#define RESOURCE_SHARED_MEMORY 0x7
#define RESOURCE_ADDRESS_ARBITER 0x8
#define RESOURCE_CPU_TIME 0x9

#define NUMBER_OF_RESOURCES 0xA

/* Normal Values are some of them are bytes so check that if you mess with them TODO check if they are still correct reversed from FIRM 4.X (Process Manager Services in emulator)

APPLICATION
0000000000000018
<Configmem-APPMEMTYPE Value> //APPMEMALLOC
0:0x04000000
1:0x04000000
2:0x06000000
3:0x05000000
4:0x04800000
5:0x02000000
6:0x07C00000 //New_3DS
7:0x0B200000 //New_3DS
0000000000000020
0000000000000020
0000000000000020
0000000000000008
0000000000000008
0000000000000010
0000000000000002
0000000000000000

SYS_APPLET
0000000000000004
<Configmem-APPMEMTYPE Value> //calculated from SYSMEMALLOC
0:0x02600000
1:0x02600000
2:0x00600000
3:0x01600000
4:0x00600000
5:0x03E00000
6:0x05000000 //New_3DS
7:0x02780000 //New_3DS
000000000000000E
0000000000000008
0000000000000008
0000000000000004
0000000000000004
0000000000000008
0000000000000002
0000000000002710

LIB_APPLET
0000000000000004
<Configmem-APPMEMTYPE Value> //calculated from SYSMEMALLOC
0:0x00600000
1:0x00600000
2:0x00000000 <-- TODO this looks wrong check it
3:0x00600000
4:0x00600000
5:0x00E00000
6:0x01400000 //New_3DS
7:0x00680000 //New_3DS
000000000000000E
0000000000000008
0000000000000008
0000000000000004
0000000000000004
0000000000000008
0000000000000001
0000000000002710

OTHER
0000000000000004
<Configmem-APPMEMTYPE Value> //calculated from SYSMEMALLOC
0:0x01680000
1:0x01680000
2:0x01680000
3:0x01680000
4:0x01680000
5:0x02000000
6:0x02480000 //New_3DS
7:0x01700000 //New_3DS
00000000000000C5
00000000000000F5
0000000000000023
000000000000003F
000000000000002B
000000000000001D
000000000000002A
00000000000003E8
*/

class KResourceLimit : public KAutoObject
{
public:

    typedef KAutoObject super;

    KResourceLimit();
    ~KResourceLimit();

    bool UseResource(u32 resource_id, u32 num);
    void FreeResource(u32 resource_id, u32 num);
    s64 GetCurrentValue(u32 resource_id);
    s64 GetMaxValue(u32 resource_id);
    void SetMaxValue(u32 resource_id, s64 number);

    static const ClassName name = KResourceLimit_Class;
    virtual bool IsInstanceOf(ClassName name);

private:
    PMutex m_Mutex;
    s32 m_MaxResource[NUMBER_OF_RESOURCES];
    s32 m_CurrentUsedResource[NUMBER_OF_RESOURCES];
};
